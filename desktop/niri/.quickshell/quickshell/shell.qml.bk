pragma ComponentBehavior: Bound

import Quickshell
import QtQuick
import Quickshell.Wayland
import QtQuick.Effects
import qs.config

ShellRoot {
    id: root

    readonly property int barWidth: 50

    Variants {
        model: Quickshell.screens

        StyledWindow {
            id: win
            name: win

            implicitHeight: 30
            required property var modelData

            screen: modelData

            anchors {
                left: true
                right: true
                top: true
            }
            Item {
              property real margin: 5

              // Set the implicit size of the containing item to the size of
              // the contained item, plus the margin on each side.
              implicitWidth: child.implicitWidth + margin * 2
              implicitHeight: child.implicitHeight + margin * 2

              Rectangle {
                id: child

                // Set the size of the child item relative to the actual size
                // of the parent item. If the parent item is constrained
                // or stretched the child's position and size will be similarly
                // constrained.
                x: parent.margin
                y: parent.margin
                width: parent.width - parent.margin * 2
                height: parent.height - parent.margin * 2

                // The child's implicit / desired size, which will be respected
                // by the container item as long as it is not constrained
                // or stretched.
                implicitWidth: 500
                implicitHeight: 500
              }
            }
            Text {
                anchors.centerIn: parent
                text: "hey"
            }
        }
    }

    component ExclusionZone: StyledWindow {
        exclusiveZone: Config.border.thickness
        name: "border-exclusion"

        mask: Region {
        }
    }
    component StyledRect: Rectangle {
        color: "transparent"

        Behavior on color {
            ColorAnimation {
                duration: 400
                easing.bezierCurve: Appearance.anim.curves.standard
                easing.type: Easing.BezierSpline
            }
        }
    }
    component StyledWindow: PanelWindow {
        required property string name

        WlrLayershell.namespace: `percygt-${name}`
        color: "transparent"
    }
}
